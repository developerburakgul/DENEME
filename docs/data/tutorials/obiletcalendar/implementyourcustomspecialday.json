{"hierarchy":{"modules":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Create-Demo-Project","projects":[{"sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar","kind":"task"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject"},{"sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar#OBBaseCalendar","kind":"task"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView","sections":[{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Add-a-Base-view"},{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Explore-a-Base-View-Range"}]},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers","sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Day-Modifier","kind":"task"},{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Include-Parameter"},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Month-Modifier","kind":"task"},{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Modified-Day-+-Modified-Month"}]}]},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Improve-User-Interface","projects":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface","sections":[{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View"}]},{"sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days","kind":"task"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView"}]},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Date-Selection","projects":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection","sections":[{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Refactor-Code"},{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection"}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection"}]},{"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Special-Day-View","projects":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay","sections":[{"reference":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay#Implement-Your-Custom-Special-Day","kind":"task"}]}]}],"reference":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar","paths":[["doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar","doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/$volume","doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Special-Day-View"]]},"kind":"project","variants":[{"paths":["\/tutorials\/obiletcalendar\/implementyourcustomspecialday"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"project","category":"","title":"Implement Special Day","categoryPathComponent":"MeetObiletCalendar"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay"},"sections":[{"kind":"hero","estimatedTimeInMinutes":7,"title":"Implement Special Day","content":[],"chapter":"Implement Special Day View"},{"kind":"tasks","tasks":[{"title":"Implement Your Custom Special Day","stepsSection":[{"code":"c4-t1-s1-s1.swift","runtimePreview":"c4-t1-s1-s1.png","type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"OBCalendarWithSpecialDay.swift"},{"text":" file.","type":"text"}]}],"caption":[]},{"code":"c4-t1-s1-s2.swift","type":"step","media":null,"runtimePreview":"c4-t1-s1-s2.png","content":[{"type":"paragraph","inlineContent":[{"text":"Update with ","type":"text"},{"code":"contentBuilder","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"modifyDayView"}]}],"caption":[]},{"runtimePreview":"c4-t1-s1-s3.png","type":"step","content":[{"inlineContent":[{"type":"text","text":"Add "},{"code":"specialDays","type":"codeVoice"},{"text":" variable and take it in initializer.","type":"text"}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write extension to create special days"}]}],"code":"c4-t1-s1-s3.swift","media":null},{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write extension for dictionary"}]}],"code":"c4-t1-s1-s4.swift","caption":[],"runtimePreview":"c4-t1-s1-s4.png"},{"code":"c4-t1-s1-s5.swift","runtimePreview":"c4-t1-s1-s5.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"modifySpecialDayView(model:content:)"},{"text":" to create small circle in dayView.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"codeVoice","code":"modifySpecialDayView(model:content:)"},{"text":" in dayView.","type":"text"}]}],"caption":[],"type":"step","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"makeSpecialDaysView(year:month:)"},{"text":".","type":"text"}]}],"runtimePreview":"c4-t1-s1-s6.png","type":"step","caption":[],"media":null,"code":"c4-t1-s1-s6.swift"},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"code":"modifySpecialDayView(model:content:)","type":"codeVoice"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"monthModifier"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"code":"c4-t1-s1-s7.swift","runtimePreview":"c4-t1-s1-s7.png","media":null,"type":"step"}],"anchor":"Implement-Your-Custom-Special-Day","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create your custom special day."}]}]}]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://ObiletCalendar/tutorials/ObiletCalendar/BaseCalendar":{"estimatedTime":"10min","abstract":[{"text":"You can more manage your calendar using ","type":"text"},{"identifier":"doc:\/\/ObiletCalendar\/documentation\/ObiletCalendar\/OBBaseCalendar","isActive":true,"type":"reference"},{"type":"text","text":".If you previous steps are enough for you, you can skip this section."}],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar","title":"Understand BaseCalendar","url":"\/tutorials\/obiletcalendar\/basecalendar","type":"topic","role":"project","kind":"project"},"c4-t1-s1-s4.swift":{"fileType":"swift","highlights":[{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151}],"syntax":"swift","type":"file","identifier":"c4-t1-s1-s4.swift","fileName":"OBCalendarWithSpecialDay.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    let specialDays: [Date?: String]","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day){","                    baseView","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    ","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 25)): \"Mock Event 1\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","    }","    ","}","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","    ","    func contains(date: Date) -> Bool {","        self.contains { element in","            element.key ==  date","        }","    }","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""]},"c4-t1-s1-s1.png":{"type":"image","alt":null,"identifier":"c4-t1-s1-s1.png","variants":[{"traits":["1x","light"],"url":"\/images\/c4-t1-s1-s1.png"}]},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection#Implement-Single-Date":{"type":"section","title":"Implement Single Date","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/implementsingledateselection#Implement-Single-Date","kind":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Implement-Single-Date","abstract":[{"text":"Implement single date selection for users can select specific date.","type":"text"}]},"c4-t1-s1-s2.swift":{"fileType":"swift","highlights":[{"line":41},{"line":42},{"line":75},{"line":76},{"line":77},{"line":78},{"line":79},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":106}],"syntax":"swift","type":"file","identifier":"c4-t1-s1-s2.swift","fileName":"OBCalendarWithSpecialDay.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day){","                    baseView","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    ","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""]},"c4-t1-s1-s1.swift":{"fileType":"swift","highlights":[],"syntax":"swift","type":"file","identifier":"c4-t1-s1-s1.swift","fileName":"OBCalendarWithSpecialDay.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                let day = model.day","                let today = calendar.startOfDay(for: Date())","                let dayDate = calendar.startOfDay(for: day.date)","                ","                if day.isInRangeCurrentMonth {","                    if dayDate < today {","                        baseView","                            .foregroundColor(.gray)","                    }else {","                        baseView","                    }","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""]},"doc://ObiletCalendar/tutorials/ObiletCalendar/CreateBaseView#Explore-a-Base-View-Range":{"abstract":[],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Explore-a-Base-View-Range","url":"\/tutorials\/obiletcalendar\/createbaseview#Explore-a-Base-View-Range","title":"Explore a Base View Range","type":"section","role":"pseudoSymbol","kind":"section"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection":{"abstract":[{"text":"Implement single date selection for users can select specific date.","type":"text"}],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection","title":"Implement Single Date Selection","url":"\/tutorials\/obiletcalendar\/implementsingledateselection","type":"topic","kind":"project","role":"project","estimatedTime":"15min"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface#Add-Weekdays-View":{"abstract":[{"type":"text","text":"Improve the user interface by adding weekdays and a header view."}],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface#Add-Weekdays-View","title":"Add Weekdays View","url":"\/tutorials\/obiletcalendar\/improveuserinterface#Add-Weekdays-View","type":"section","role":"pseudoSymbol","kind":"section"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView":{"type":"topic","estimatedTime":"1min","title":"Change Day View","role":"project","url":"\/tutorials\/obiletcalendar\/changedayview","kind":"project","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView","abstract":[]},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Implement-Date-Selection":{"type":"topic","title":"Implement Date Selection","abstract":[],"url":"\/tutorials\/meetobiletcalendar\/implement-date-selection","kind":"article","identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Date-Selection","role":"article"},"c4-t1-s1-s5.swift":{"fileType":"swift","highlights":[{"line":17},{"line":44},{"line":47},{"line":48},{"line":49},{"line":50},{"line":103},{"line":104},{"line":105},{"line":106},{"line":107},{"line":108},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119},{"line":120},{"line":121},{"line":122},{"line":123},{"line":124},{"line":125},{"line":126},{"line":127},{"line":128},{"line":129},{"line":130},{"line":131},{"line":132},{"line":133},{"line":134},{"line":135},{"line":136},{"line":137},{"line":138},{"line":139},{"line":140},{"line":141},{"line":142},{"line":162}],"syntax":"swift","type":"file","fileName":"OBCalendarWithSpecialDay.swift","identifier":"c4-t1-s1-s5.swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    let specialDays: [Date?: String]","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    var OBBlue = Self.makeColor(red: 47, green: 91, blue: 141)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                let modifiedContent = modifyDayView(model: model.day){","                    baseView","                }","                ","                modifySpecialDayView(model: model.day) {","                    modifiedContent","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","    ","    func modifySpecialDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                }else {","                    if specialDays.contains(date: model.date) , !specialDays.isEmpty {","                        modifiedContent","                            .overlay(","                                VStack(alignment: .trailing, content: {","                                    Image(systemName: \"circle.fill\")","                                        .resizable()","                                        .frame(width: 6, height: 6)","                                        .foregroundColor(OBBlue)","                                        .frame(maxWidth: .infinity,alignment: .trailing)","                                    Spacer()","                                })","                                .padding(8)","                                ","                            )","                    }else {","                        modifiedContent","                    }","                }","            }else {","                Color.clear","            }","        }","    }","","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 25)): \"Mock Event 1\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","","    }","    ","}","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","    ","    func contains(date: Date) -> Bool {","        self.contains { element in","            element.key ==  date","        }","    }","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""]},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection#Implement-Double-Date-Selection":{"abstract":[],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection#Implement-Double-Date-Selection","title":"Implement Double Date Selection","url":"\/tutorials\/obiletcalendar\/implementdoubledateselection#Implement-Double-Date-Selection","type":"section","role":"pseudoSymbol","kind":"section"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Month-Modifier":{"type":"section","title":"Month Modifier","abstract":[],"url":"\/tutorials\/obiletcalendar\/understandmodifiers#Month-Modifier","kind":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Month-Modifier","role":"pseudoSymbol"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementYourCustomSpecialDay#Implement-Your-Custom-Special-Day":{"abstract":[],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay#Implement-Your-Custom-Special-Day","url":"\/tutorials\/obiletcalendar\/implementyourcustomspecialday#Implement-Your-Custom-Special-Day","title":"Implement Your Custom Special Day","type":"section","role":"pseudoSymbol","kind":"section"},"c4-t1-s1-s3.swift":{"content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    let specialDays: [Date?: String]","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                modifyDayView(model: model.day){","                    baseView","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    ","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 25)): \"Mock Event 1\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","    }","    ","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""],"type":"file","syntax":"swift","identifier":"c4-t1-s1-s3.swift","fileType":"swift","highlights":[{"line":13},{"line":20},{"line":109},{"line":110},{"line":111},{"line":112},{"line":113},{"line":114},{"line":115},{"line":116},{"line":117},{"line":118},{"line":119}],"fileName":"OBCalendarWithSpecialDay.swift"},"c4-t1-s1-s6.swift":{"syntax":"swift","content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    let specialDays: [Date?: String]","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    var OBBlue = Self.makeColor(red: 47, green: 91, blue: 141)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                let modifiedContent = modifyDayView(model: model.day){","                    baseView","                }","                ","                modifySpecialDayView(model: model.day) {","                    modifiedContent","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","    ","    func modifySpecialDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                }else {","                    if specialDays.contains(date: model.date) , !specialDays.isEmpty {","                        modifiedContent","                            .overlay(","                                VStack(alignment: .trailing, content: {","                                    Image(systemName: \"circle.fill\")","                                        .resizable()","                                        .frame(width: 6, height: 6)","                                        .foregroundColor(OBBlue)","                                        .frame(maxWidth: .infinity,alignment: .trailing)","                                    Spacer()","                                })","                                .padding(8)","                                ","                            )","                    }else {","                        modifiedContent","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func makeSpecialDaysView(year: Int, month: CalendarModel.Month) -> some View {","        contentBuilder {","            if specialDays.yearExist(year: year, calendar: calendar) {","                ForEach(month.days.indices, id: \\.self) { index in","                    let day = month.days[index]","                    if case .insideRange(.currentMonth) = day.rangeType,","                       let specialDay = specialDays.get(year: year, month: month.month, day: day.day, calendar: calendar){","                        HStack {","                            Image(systemName: \"circle.fill\")","                                .resizable()","                                .frame(width: 6, height: 6)","                                .aspectRatio(contentMode: .fit)","                                .foregroundColor(OBBlue)","                            Text(specialDay.value)","                        }","                    }","                }","            }","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 25)): \"Mock Event 1\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","","    }","    ","}","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","    ","    func contains(date: Date) -> Bool {","        self.contains { element in","            element.key ==  date","        }","    }","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""],"identifier":"c4-t1-s1-s6.swift","fileName":"OBCalendarWithSpecialDay.swift","highlights":[{"line":142},{"line":143},{"line":144},{"line":145},{"line":146},{"line":147},{"line":148},{"line":149},{"line":150},{"line":151},{"line":152},{"line":153},{"line":154},{"line":155},{"line":156},{"line":157},{"line":158},{"line":159},{"line":160},{"line":161},{"line":162}],"type":"file","fileType":"swift"},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Implement-Special-Day-View":{"abstract":[],"kind":"article","type":"topic","identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Implement-Special-Day-View","url":"\/tutorials\/meetobiletcalendar\/implement-special-day-view","role":"article","title":"Implement Special Day View"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Day-Modifier":{"abstract":[],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Day-Modifier","title":"Day Modifier","url":"\/tutorials\/obiletcalendar\/understandmodifiers#Day-Modifier","type":"section","role":"pseudoSymbol","kind":"section"},"doc://ObiletCalendar/tutorials/ObiletCalendar/CreateBaseView":{"type":"topic","estimatedTime":"5min","title":"Create Base View","role":"project","url":"\/tutorials\/obiletcalendar\/createbaseview","kind":"project","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView","abstract":[]},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Create-Demo-Project":{"type":"topic","title":"Create Demo Project","role":"article","url":"\/tutorials\/meetobiletcalendar\/create-demo-project","kind":"article","identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Create-Demo-Project","abstract":[]},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers":{"estimatedTime":"2min","abstract":[],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers","url":"\/tutorials\/obiletcalendar\/understandmodifiers","title":"Understand Modifiers","type":"topic","role":"project","kind":"project"},"c4-t1-s1-s7.swift":{"content":["\/\/","\/\/  OBCalendarWithSpecialDay.swift","\/\/  OBCalendarWithSpecialDay","\/\/","\/\/  Created by Burak GÃ¼l on 19.11.2024.","\/\/","","import SwiftUI","import ObiletCalendar","","struct OBCalendarWithSpecialDay: View {","    var calendar: Calendar = Calendar.current","    let specialDays: [Date?: String]","    ","    var OBRed = Self.makeColor(red: 210, green: 59, blue: 56)","    var OBGray = Self.makeColor(red: 239, green: 239, blue: 239)","    var OBBlue = Self.makeColor(red: 47, green: 91, blue: 141)","    ","    init(_ calendar: Calendar) {","        self.calendar = calendar","        self.specialDays = Self.makeSpecialDays(calendar: calendar)","    }","    ","    var body: some View {","        VStack(spacing:0) {","            Spacer()","            headerView","                .fixedSize(horizontal: false, vertical: true)","                .padding()","                .background(OBRed)","                .foregroundColor(.white)","            ","            weekdaysView","                .padding(.vertical,8)","                .padding(.horizontal,16)","                .background(OBGray)","            calendarView","        }","    }","    ","    var calendarView: some View {","        OBCalendar(calendar:calendar)","            .dayModifier { baseView, model in","                let modifiedContent = modifyDayView(model: model.day){","                    baseView","                }","                ","                modifySpecialDayView(model: model.day) {","                    modifiedContent","                }","            }","            .monthModifier { baseView, daysView, model in","                VStack {","                    baseView","                    ","                    if !specialDays.isEmpty {","                        makeSpecialDaysView(year: model.year.year, month: model.month)","                            .frame(maxWidth: .infinity,alignment: .leading)","                            .padding()","                        ","                    }","                }","            }","    }","    ","    var weekdaysView: some View {","        let weekdays = getShortLocalizedWeekdays(for: calendar)","        return HStack {","            ForEach(weekdays.indices, id: \\.self) { index in","                Text(weekdays[index])","                    .frame(maxWidth: .infinity)","            }","        }","    }","    ","    var headerView: some View {","        HStack {","            Text(\"Departure\")","            Spacer()","            Image(systemName: \"xmark\")","        }","    }","    ","    func getShortLocalizedWeekdays(","        for calendar: Calendar","    ) -> [String] {","        let firstWeekday = calendar.firstWeekday","        let shortWeekdays = calendar.shortWeekdaySymbols","        let firstWeekdayIndex = firstWeekday - 1","        let reorderedShortWeekdays = Array(shortWeekdays[firstWeekdayIndex...])","        + Array(shortWeekdays[..<firstWeekdayIndex])","        return reorderedShortWeekdays","    }","    ","    private func contentBuilder<Content: View>(@ViewBuilder content: () -> Content) -> Content {","        content()","    }","    ","    func modifyDayView<Content:View>(model: CalendarModel.Day, @ViewBuilder content: () -> Content ) -> some View {","        contentBuilder {","            let day = model.day","            let today = calendar.startOfDay(for: Date())","            let dayDate = calendar.startOfDay(for: model.date)","            ","            if model.isInRangeCurrentMonth {","                if dayDate < today {","                    content()","                        .foregroundColor(.gray)","                }else {","                    content()","                }","            }","        }","    }","    ","    func modifySpecialDayView<Content: View>(","        model: CalendarModel.Day,","        @ViewBuilder content: () -> Content","    ) -> some View {","        contentBuilder {","            \/\/ some logic and view goes here","            let startOfToday = calendar.startOfDay(for: Date())","            let startOfDay = calendar.startOfDay(for: model.date)","            let modifiedContent = content()","            ","            if case .insideRange(.currentMonth) = model.rangeType {","                ","                if (startOfDay < startOfToday) {","                    modifiedContent","                }else {","                    if specialDays.contains(date: model.date) , !specialDays.isEmpty {","                        modifiedContent","                            .overlay(","                                VStack(alignment: .trailing, content: {","                                    Image(systemName: \"circle.fill\")","                                        .resizable()","                                        .frame(width: 6, height: 6)","                                        .foregroundColor(OBBlue)","                                        .frame(maxWidth: .infinity,alignment: .trailing)","                                    Spacer()","                                })","                                .padding(8)","                                ","                            )","                    }else {","                        modifiedContent","                    }","                }","            }else {","                Color.clear","            }","        }","    }","    ","    func makeSpecialDaysView(year: Int, month: CalendarModel.Month) -> some View {","        contentBuilder {","            if specialDays.yearExist(year: year, calendar: calendar) {","                ForEach(month.days.indices, id: \\.self) { index in","                    let day = month.days[index]","                    if case .insideRange(.currentMonth) = day.rangeType,","                       let specialDay = specialDays.get(year: year, month: month.month, day: day.day, calendar: calendar){","                        HStack {","                            Image(systemName: \"circle.fill\")","                                .resizable()","                                .frame(width: 6, height: 6)","                                .aspectRatio(contentMode: .fit)","                                .foregroundColor(OBBlue)","                            Text(specialDay.value)","                        }","                        Divider()","                    }","                }","            }","        }","    }","}","","private extension OBCalendarWithSpecialDay {","    static func makeColor(red: Int, green: Int, blue: Int) -> Color {","        Color(","            red: Double(red) \/ 255,","            green: Double(green) \/ 255,","            blue: Double(blue) \/ 255","        )","    }","    static func makeSpecialDays(calendar: Calendar) -> [Date?: String] {","        [","            calendar.date(from: DateComponents(year: 2024, month: 11, day: 25)): \"Mock Event 1\",","            calendar.date(from: DateComponents(year: 2025, month: 1, day: 1)): \"New Year's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 12, day: 25)): \"Christmas\",","            calendar.date(from: DateComponents(year: 2024, month: 4, day: 23)): \"National Sovereignty and Children's Day\",","            calendar.date(from: DateComponents(year: 2024, month: 5, day: 1)): \"Labor Day\",","            calendar.date(from: DateComponents(year: 2024, month: 8, day: 30)): \"Victory Day\"","        ]","    }","    ","}","","extension Dictionary where Key == Date?, Value == String {","    func yearExist(year: Int, calendar: Calendar) -> Bool {","        self.contains { element in","            if let date = element.key {","                year == calendar.component(.year, from: date)","            }else {","                false","            }","        }","    }","    ","    func get(year: Int, month: Int, day: Int, calendar: Calendar) -> Dictionary<Date?,String>.Element? {","        self.first { element in","            if let date = element.key {","                return year == calendar.component(.year, from: date)","                && month == calendar.component(.month, from: date)","                && day == calendar.component(.day, from: date)","            }else {","                return false","            }","        }","    }","    ","    func contains(date: Date) -> Bool {","        self.contains { element in","            element.key ==  date","        }","    }","}","","#Preview {","    let calendar = Calendar.current","    return OBCalendarWithSpecialDay(calendar)","}",""],"type":"file","syntax":"swift","identifier":"c4-t1-s1-s7.swift","fileType":"swift","highlights":[{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":170}],"fileName":"OBCalendarWithSpecialDay.swift"},"doc://ObiletCalendar/tutorials/ObiletCalendar/BaseCalendar#OBBaseCalendar":{"type":"section","title":"OBBaseCalendar","abstract":[{"text":"You can more manage your calendar using ","type":"text"},{"type":"reference","identifier":"doc:\/\/ObiletCalendar\/documentation\/ObiletCalendar\/OBBaseCalendar","isActive":true},{"type":"text","text":".If you previous steps are enough for you, you can skip this section."}],"url":"\/tutorials\/obiletcalendar\/basecalendar#OBBaseCalendar","kind":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/BaseCalendar#OBBaseCalendar","role":"pseudoSymbol"},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Modified-Day-+-Modified-Month":{"type":"section","title":"Modified Day + Modified Month","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/understandmodifiers#Modified-Day-+-Modified-Month","kind":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Modified-Day-+-Modified-Month","abstract":[]},"doc://ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar":{"type":"section","title":"Create a new project and add ObiletCalendar","role":"pseudoSymbol","url":"\/tutorials\/obiletcalendar\/setupemptyproject#Create-a-new-project-and-add-ObiletCalendar","kind":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject#Create-a-new-project-and-add-ObiletCalendar","abstract":[{"text":"Setup Empty Project","type":"text"}]},"doc://ObiletCalendar/tutorials/MeetObiletCalendar/Improve-User-Interface":{"type":"topic","kind":"article","abstract":[],"url":"\/tutorials\/meetobiletcalendar\/improve-user-interface","title":"Improve User Interface","identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar\/Improve-User-Interface","role":"article"},"c4-t1-s1-s2.png":{"type":"image","identifier":"c4-t1-s1-s2.png","alt":null,"variants":[{"traits":["1x","light"],"url":"\/images\/c4-t1-s1-s2.png"}]},"c4-t1-s1-s3.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/c4-t1-s1-s3.png"}],"type":"image","alt":null,"identifier":"c4-t1-s1-s3.png"},"c4-t1-s1-s4.png":{"variants":[{"url":"\/images\/c4-t1-s1-s4.png","traits":["1x","light"]}],"alt":null,"identifier":"c4-t1-s1-s4.png","type":"image"},"c4-t1-s1-s6.png":{"type":"image","alt":null,"identifier":"c4-t1-s1-s6.png","variants":[{"url":"\/images\/c4-t1-s1-s6.png","traits":["1x","light"]}]},"c4-t1-s1-s7.png":{"variants":[{"url":"\/images\/c4-t1-s1-s7.png","traits":["1x","light"]}],"alt":null,"identifier":"c4-t1-s1-s7.png","type":"image"},"doc://ObiletCalendar/documentation/ObiletCalendar/OBBaseCalendar":{"identifier":"doc:\/\/ObiletCalendar\/documentation\/ObiletCalendar\/OBBaseCalendar","type":"topic","title":"OBBaseCalendar","navigatorTitle":[{"text":"OBBaseCalendar","kind":"identifier"}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"OBBaseCalendar","kind":"identifier"}],"abstract":[],"url":"\/documentation\/obiletcalendar\/obbasecalendar"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementDoubleDateSelection":{"type":"topic","title":"Implement Double Date Selection","abstract":[],"url":"\/tutorials\/obiletcalendar\/implementdoubledateselection","kind":"project","estimatedTime":"10min","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementDoubleDateSelection","role":"project"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ChangeDayView#Hide-Some-Days":{"type":"section","title":"Hide Some Days","abstract":[],"url":"\/tutorials\/obiletcalendar\/changedayview#Hide-Some-Days","kind":"section","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ChangeDayView#Hide-Some-Days","role":"pseudoSymbol"},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementSingleDateSelection#Refactor-Code":{"abstract":[{"type":"text","text":"Implement single date selection for users can select specific date."}],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementSingleDateSelection#Refactor-Code","title":"Refactor Code","url":"\/tutorials\/obiletcalendar\/implementsingledateselection#Refactor-Code","type":"section","role":"pseudoSymbol","kind":"section"},"doc://ObiletCalendar/tutorials/ObiletCalendar/SetupEmptyProject":{"type":"topic","estimatedTime":"3min","title":"Setup Empty Project","role":"project","url":"\/tutorials\/obiletcalendar\/setupemptyproject","kind":"project","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/SetupEmptyProject","abstract":[{"text":"Setup Empty Project","type":"text"}]},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImplementYourCustomSpecialDay":{"type":"topic","estimatedTime":"7min","title":"Implement Special Day","role":"project","url":"\/tutorials\/obiletcalendar\/implementyourcustomspecialday","kind":"project","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImplementYourCustomSpecialDay","abstract":[]},"c4-t1-s1-s5.png":{"type":"image","alt":null,"identifier":"c4-t1-s1-s5.png","variants":[{"url":"\/images\/c4-t1-s1-s5.png","traits":["1x","light"]}]},"doc://ObiletCalendar/tutorials/ObiletCalendar/ImproveUserInterface":{"type":"topic","estimatedTime":"10min","title":"Improve User Interface","role":"project","url":"\/tutorials\/obiletcalendar\/improveuserinterface","kind":"project","identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/ImproveUserInterface","abstract":[{"text":"Improve the user interface by adding weekdays and a header view.","type":"text"}]},"doc://ObiletCalendar/tutorials/ObiletCalendar/UnderstandModifiers#Include-Parameter":{"abstract":[],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/UnderstandModifiers#Include-Parameter","title":"Include Parameter","url":"\/tutorials\/obiletcalendar\/understandmodifiers#Include-Parameter","type":"section","role":"pseudoSymbol","kind":"section"},"doc://ObiletCalendar/tutorials/ObiletCalendar/CreateBaseView#Add-a-Base-view":{"abstract":[],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/ObiletCalendar\/CreateBaseView#Add-a-Base-view","url":"\/tutorials\/obiletcalendar\/createbaseview#Add-a-Base-view","title":"Add a Base view","type":"section","role":"pseudoSymbol","kind":"section"},"doc://ObiletCalendar/tutorials/MeetObiletCalendar":{"abstract":[{"type":"text","text":"Create easily your custom calendar"}],"identifier":"doc:\/\/ObiletCalendar\/tutorials\/MeetObiletCalendar","url":"\/tutorials\/meetobiletcalendar","title":"Meet ObiletCalendar","type":"topic","role":"overview","kind":"overview"}}}